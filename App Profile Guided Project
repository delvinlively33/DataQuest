from csv import reader

opened_android = open('googleplaystore.csv')
opened_ios = open('AppleStore.csv')

read_android = reader(opened_android)
read_ios = reader(opened_ios)

android = list(read_android)
ios = list(read_ios)

android_head = (android[0])
ios_head = ios[0]

android_main = (android[1:])
ios_main = (ios[1:])

def explore_data(dataset, start, end, rows_and_columns = False):
    dataset_slice = dataset[0:3]
    for row in dataset_slice:
        print(row)
        print('\n')
        
    if rows_and_columns:
        print('number of rows:', len(dataset))
        print('Number of columns:', len(dataset[0]))
        
del android_main[10472]

duplicate_apps = [] ##This list is for the apps with duplicates
unique_apps = [] ##This is for the non-duplicates

for app in android_main:
    name = app[0]
    if name in unique_apps:
        duplicate_apps.append(name)
    else:
        unique_apps.append(name)
        
reviews_max = {}
for app in android_main:
    name = app[0]
    n_reviews = float(app[3])
    if name in reviews_max and reviews_max[name] < n_reviews:
        reviews_max[name] = n_reviews
    elif name not in reviews_max:
        reviews_max[name] = n_reviews
               
        
android_clean = []
already_added = []

for app in android_main:
    name = app[0]
    n_reviews = float(app[3])
    if (n_reviews == reviews_max[name]) and (name not in already_added):
        android_clean.append(app)
        already_added.append(name)
        
def English(string):
    emojis = 0
    
    for let in string:
        if ord(let) > 127:
            emojis += 1
        if emojis > 3:
            return False
        else:
            return True
            
android_english = []
ios_english = []

for app in android_clean:
    name = app[0]
    if English(name):
        android_english.append(app)
        
for app in ios_main:
    name = app[1]
    if English(name):
        ios_english.append(app)
        
android_final = []
ios_final = []

for app in android_english:
    price = app[7]
    if price == '0':
        android_final.append(app)
        
for app in ios_english:
    price = app[4]
    if price == '0.0':
        ios_final.append(app)
def freq_table(dataset, index):
    table = {}
    total = 0
    
    for row in dataset:
        total += 1
        value = row[index]
        if value in table:
            table[value] += 1
        else:
            table[value] = 1
    
    table_percentages = {}
    for key in table:
        percentage = (table[key] / total) * 100
        table_percentages[key] = percentage 
    
    return table_percentages


def display_table(dataset, index):
    table = freq_table(dataset, index)
    table_display = []
    for key in table:
        key_val_as_tuple = (table[key], key)
        table_display.append(key_val_as_tuple)
        
    table_sorted = sorted(table_display, reverse = True)
    for entry in table_sorted:
        print(entry[1], ':', entry[0])
        
genres_ios = freq_table(ios_final, -5)

for genre in genres_ios:
    total = 0
    len_genre = 0
    for app in ios_final:
        genre_app = app[-5]
        if genre_app == genre:            
            n_ratings = float(app[5])
            total += n_ratings
            len_genre += 1
    avg_n_ratings = total / len_genre
    print(genre, ':', avg_n_ratings)
    
categories_android = freq_table(android_final, 1)

for category in categories_android:
    total = 0
    len_category = 0
    for app in android_final:
        category_app = app[1]
        if category_app == category:            
            n_installs = app[5]
            n_installs = n_installs.replace(',', '')
            n_installs = n_installs.replace('+', '')
            total += float(n_installs)
            len_category += 1
    avg_n_installs = total / len_category
    print(category, ':', avg_n_installs)    
